"use strict";
function _typeof(t) {
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
        return typeof t
    }
    : function(t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
    }
    ,
    _typeof(t)
}
!function(t) {
    var e, i, n = (e = t) && "object" === _typeof(e) && "default"in e ? e : {
        default: e
    }, o = (i = function(t, e) {
        return i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var i in e)
                Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i])
        }
        ,
        i(t, e)
    }
    ,
    function(t, e) {
        function n() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (n.prototype = e.prototype,
        new n)
    }
    ), s = new (function() {
        function t() {}
        return t.prototype.initialize = function() {}
        ,
        t.prototype.select = function() {}
        ,
        t.prototype.deselect = function() {}
        ,
        t.prototype.enable = function() {}
        ,
        t.prototype.disable = function() {}
        ,
        t.prototype.isSelected = function() {
            return !1
        }
        ,
        t.prototype.isDisabled = function() {
            return !0
        }
        ,
        t.prototype.getListItem = function() {
            return document.createElement("div")
        }
        ,
        t.prototype.getSelectedItemBadge = function() {
            return document.createElement("div")
        }
        ,
        t.prototype.getLabel = function() {
            return "NULL_OPTION"
        }
        ,
        t.prototype.getValue = function() {
            return "NULL_OPTION"
        }
        ,
        t.prototype.show = function() {}
        ,
        t.prototype.hide = function() {}
        ,
        t.prototype.isHidden = function() {
            return !0
        }
        ,
        t.prototype.focus = function() {}
        ,
        t.prototype.activate = function() {}
        ,
        t.prototype.deactivate = function() {}
        ,
        t
    }()), l = function() {
        function t(e, i) {
            var n = this;
            this.documentKeydownListener = function(t) {
                switch (t.key) {
                case "Tab":
                    t.stopPropagation(),
                    n.closeDropdown();
                    break;
                case "ArrowUp":
                    t.stopPropagation(),
                    t.preventDefault(),
                    n.decrementItemFocus(),
                    n.focusItem();
                    break;
                case "ArrowDown":
                    t.stopPropagation(),
                    t.preventDefault(),
                    n.incrementItemFocus(),
                    n.focusItem();
                    break;
                case "Enter":
                case "Spacebar":
                case " ":
                    break;
                default:
                    n.refocusFilter();
                    break
                }
            }
            ,
            this.documentClickListener = function(t) {
                n.div === t.target || n.div.contains(t.target) || n.closeDropdown()
            }
            ,
            this.fmsFocusListener = function(t) {
                t.stopPropagation(),
                t.preventDefault(),
                n.viewBar.dispatchEvent(new MouseEvent("click"))
            }
            ,
            this.fmsMousedownListener = function(t) {
                t.stopPropagation(),
                t.preventDefault()
            }
            ;
            var o = e.get(0);
            if (!(o instanceof HTMLSelectElement))
                throw new Error("JQuery target must be a select element.");
            var s = o
              , l = s.name;
            if (!l)
                throw new Error("Select element must have a name attribute.");
            this.name = l;
            var c = e.find("option").toArray();
            this.options = t.createOptions(this, l, c, i.items),
            this.numSelectedItems = 0,
            this.maxNumSelectedItems = s.multiple ? i.selectionLimit > 0 ? i.selectionLimit : parseInt(s.getAttribute("multiple")) > 0 ? parseInt(s.getAttribute("multiple")) : 0 : 1;
            var r = this.options.length
              , a = this.maxNumSelectedItems > 0 && this.maxNumSelectedItems < r;
            this.maxNumSelectedItems = a ? this.maxNumSelectedItems : r + 1,
            this.selectAllOption = a ? new t.RestrictedSelectAllOption(this,l,i.selectAllText) : new t.UnrestrictedSelectAllOption(this,l,i.selectAllText),
            this.filterInput = document.createElement("input"),
            this.filterInput.type = "text",
            this.filterInput.placeholder = i.filterText,
            this.clearButton = document.createElement("button"),
            this.clearButton.type = "button",
            this.clearButton.innerHTML = "&times;",
            this.filter = document.createElement("div"),
            this.filter.append(this.filterInput, this.clearButton),
            this.items = document.createElement("div"),
            this.items.append(this.selectAllOption.getListItem()),
            this.options.forEach((function(t) {
                return n.items.append(t.getListItem())
            }
            )),
            this.dropDown = document.createElement("div"),
            this.dropDown.append(this.filter, this.items),
            this.placeholder = document.createElement("span"),
            this.placeholder.textContent = i.placeholderText,
            this.selectedItems = document.createElement("span"),
            this.label = document.createElement("span"),
            this.label.textContent = i.labelText,
            0 != i.labelText.length || (this.label.hidden = !0),
            this.selectionCounter = document.createElement("span"),
            this.selectionCounter.hidden = !a,
            this.viewBar = document.createElement("div"),
            this.viewBar.append(this.label, this.selectionCounter, this.placeholder, this.selectedItems),
            this.div = document.createElement("div"),
            this.div.id = s.id,
            this.div.append(this.viewBar, this.dropDown),
            this.caseSensitive = i.caseSensitive,
            this.disabled = s.disabled,
            this.allowEnablingAndDisabling = i.allowEnablingAndDisabling,
            this.filterText = "",
            this.showing = new Array,
            this.itemFocus = -2,
            this.initialize()
        }
        return t.createOptions = function(e, i, n, o) {
            var s = n.map((function(n, o) {
                return t.checkValue(n.value, n.label),
                new t.SingleOption(e,o,i,n.label,n.value,n.defaultSelected,n.disabled)
            }
            ))
              , l = n.length
              , c = o.map((function(n, o) {
                var s = n[0]
                  , c = n[1]
                  , r = n[2]
                  , a = n[3];
                return t.checkValue(c, s),
                new t.SingleOption(e,l + o,i,s,c,r,a)
            }
            ))
              , r = s.concat(c)
              , a = {};
            return r.forEach((function(t) {
                var e = t.getValue();
                if (void 0 !== a[e])
                    throw new Error("Duplicate value: " + t.getValue() + " (" + t.getLabel() + ")");
                a[e] = 1
            }
            )),
            r
        }
        ,
        t.checkValue = function(t, e) {
            if ("" === t)
                throw new Error("Option " + e + " does not have an associated value.")
        }
        ,
        t.createEvent = function(t, e, i, n) {
            return new CustomEvent(t,{
                detail: {
                    name: e,
                    value: i,
                    label: n
                },
                bubbles: !0,
                cancelable: !0,
                composed: !1
            })
        }
        ,
        t.prototype.initialize = function() {
            if (this.options.forEach((function(t) {
                return t.initialize()
            }
            )),
            this.selectAllOption.initialize(),
            this.filterInput.className = "form-control",
            this.clearButton.tabIndex = -1,
            this.filter.className = "filter dropdown-item",
            this.items.className = "items dropdown-item",
            this.dropDown.className = "dropdown-menu",
            this.placeholder.className = "placeholder",
            this.selectedItems.className = "selected-items",
            this.viewBar.className = "viewbar form-control dropdown-toggle",
            this.label.className = "col-form-label mr-2 text-dark",
            this.selectionCounter.className = "mr-2",
            this.div.className = "filter-multi-select dropdown",
            this.maxNumSelectedItems > 1) {
                var t = this.maxNumSelectedItems >= this.options.length ? "" : this.maxNumSelectedItems.toString();
                this.div.setAttribute("multiple", t)
            } else
                this.div.setAttribute("single", "");
            this.isDisabled() && this.disableNoPermissionCheck(),
            this.attachDropdownListeners(),
            this.attachViewbarListeners(),
            this.closeDropdown()
        }
        ,
        t.prototype.log = function(t, e) {}
        ,
        t.prototype.attachDropdownListeners = function() {
            var t = this;
            this.filterInput.addEventListener("keyup", (function(e) {
                e.stopImmediatePropagation(),
                t.updateDropdownList();
                var i = t.showing.length;
                switch (e.key) {
                case "Enter":
                    if (1 === i) {
                        var n = t.options[t.showing[0]];
                        n.isDisabled() || (n.isSelected() ? n.deselect() : n.select(),
                        t.clearFilterAndRefocus())
                    }
                    break;
                case "Escape":
                    t.filterText.length > 0 ? t.clearFilterAndRefocus() : t.closeDropdown();
                    break
                }
            }
            ), !0),
            this.clearButton.addEventListener("click", (function(e) {
                e.stopImmediatePropagation(),
                t.filterInput.value.length > 0 ? t.clearFilterAndRefocus() : t.closeDropdown()
            }
            ), !0)
        }
        ,
        t.prototype.updateDropdownList = function() {
            var t = this.filterInput.value;
            t.length > 0 ? this.selectAllOption.hide() : this.selectAllOption.show();
            var e = new Array;
            this.caseSensitive ? this.options.forEach((function(i, n) {
                -1 !== i.getLabel().indexOf(t) ? (i.show(),
                e.push(n)) : i.hide()
            }
            )) : this.options.forEach((function(i, n) {
                -1 !== i.getLabel().toLowerCase().indexOf(t.toLowerCase()) ? (i.show(),
                e.push(n)) : i.hide()
            }
            )),
            this.filterText = t,
            this.showing = e
        }
        ,
        t.prototype.clearFilterAndRefocus = function() {
            this.filterInput.value = "",
            this.updateDropdownList(),
            this.refocusFilter()
        }
        ,
        t.prototype.refocusFilter = function() {
            this.filterInput.focus(),
            this.itemFocus = -2
        }
        ,
        t.prototype.attachViewbarListeners = function() {
            var t = this;
            this.viewBar.addEventListener("click", (function(e) {
                t.isClosed() ? t.openDropdown() : t.closeDropdown()
            }
            ))
        }
        ,
        t.prototype.isClosed = function() {
            return !this.dropDown.classList.contains("show")
        }
        ,
        t.prototype.setTabIndex = function() {
            this.isDisabled() ? this.div.tabIndex = -1 : this.isClosed() ? this.div.tabIndex = 0 : this.div.tabIndex = -1
        }
        ,
        t.prototype.closeDropdown = function() {
            var t = this;
            document.removeEventListener("keydown", this.documentKeydownListener, !0),
            document.removeEventListener("click", this.documentClickListener, !0),
            this.dropDown.classList.remove("show"),
            setTimeout((function() {
                t.setTabIndex()
            }
            ), 100),
            this.div.addEventListener("mousedown", this.fmsMousedownListener, !0),
            this.div.addEventListener("focus", this.fmsFocusListener)
        }
        ,
        t.prototype.incrementItemFocus = function() {
            if (!(this.itemFocus >= this.options.length - 1)) {
                var t = this.itemFocus;
                do {
                    t++
                } while (-1 == t && (this.selectAllOption.isDisabled() || this.selectAllOption.isHidden()) || t >= 0 && t < this.options.length && (this.options[t].isDisabled() || this.options[t].isHidden()));
                this.itemFocus = t > this.options.length - 1 ? this.itemFocus : t
            }
        }
        ,
        t.prototype.decrementItemFocus = function() {
            if (!(this.itemFocus <= -2)) {
                var t = this.itemFocus;
                do {
                    t--
                } while (-1 == t && (this.selectAllOption.isDisabled() || this.selectAllOption.isHidden()) || t >= 0 && (this.options[t].isDisabled() || this.options[t].isHidden()) && t > -2);
                this.itemFocus = t
            }
        }
        ,
        t.prototype.focusItem = function() {
            -2 === this.itemFocus ? this.refocusFilter() : -1 === this.itemFocus ? this.selectAllOption.focus() : this.options[this.itemFocus].focus()
        }
        ,
        t.prototype.openDropdown = function() {
            this.disabled || (this.div.removeEventListener("mousedown", this.fmsMousedownListener, !0),
            this.div.removeEventListener("focus", this.fmsFocusListener),
            this.dropDown.classList.add("show"),
            this.setTabIndex(),
            this.clearFilterAndRefocus(),
            document.addEventListener("keydown", this.documentKeydownListener, !0),
            document.addEventListener("click", this.documentClickListener, !0))
        }
        ,
        t.prototype.queueOption = function(t) {
            -1 != this.options.indexOf(t) && (this.numSelectedItems++,
            n.default(this.selectedItems).append(t.getSelectedItemBadge()))
        }
        ,
        t.prototype.unqueueOption = function(t) {
            -1 != this.options.indexOf(t) && (this.numSelectedItems--,
            n.default(this.selectedItems).children('[data-id="' + t.getSelectedItemBadge().getAttribute("data-id") + '"]').remove())
        }
        ,
        t.prototype.update = function() {
            this.areAllSelected() ? (this.selectAllOption.markSelectAll(),
            this.placeholder.hidden = !0) : this.areSomeSelected() ? this.areOnlyDeselectedAlsoDisabled() ? (this.selectAllOption.markSelectAllNotDisabled(),
            this.placeholder.hidden = !0) : (this.selectAllOption.markSelectPartial(),
            this.placeholder.hidden = !0) : (this.selectAllOption.markDeselect(),
            this.placeholder.hidden = !1),
            this.areAllDisabled() ? this.selectAllOption.disable() : this.selectAllOption.enable(),
            this.canSelect() ? this.options.filter((function(t) {
                return !t.isSelected()
            }
            )).forEach((function(t) {
                return t.activate()
            }
            )) : this.options.filter((function(t) {
                return !t.isSelected()
            }
            )).forEach((function(t) {
                return t.deactivate()
            }
            )),
            this.updateSelectionCounter()
        }
        ,
        t.prototype.areAllSelected = function() {
            return this.options.map((function(t) {
                return t.isSelected()
            }
            )).reduce((function(t, e) {
                return t && e
            }
            ), !0)
        }
        ,
        t.prototype.areSomeSelected = function() {
            return this.options.map((function(t) {
                return t.isSelected()
            }
            )).reduce((function(t, e) {
                return t || e
            }
            ), !1)
        }
        ,
        t.prototype.areOnlyDeselectedAlsoDisabled = function() {
            return this.options.filter((function(t) {
                return !t.isSelected()
            }
            )).map((function(t) {
                return t.isDisabled()
            }
            )).reduce((function(t, e) {
                return t && e
            }
            ), !0)
        }
        ,
        t.prototype.areAllDisabled = function() {
            return this.options.map((function(t) {
                return t.isDisabled()
            }
            )).reduce((function(t, e) {
                return t && e
            }
            ), !0)
        }
        ,
        t.prototype.isEnablingAndDisablingPermitted = function() {
            return this.allowEnablingAndDisabling
        }
        ,
        t.prototype.getRootElement = function() {
            return this.div
        }
        ,
        t.prototype.hasOption = function(t) {
            return this.getOption(t) !== s
        }
        ,
        t.prototype.getOption = function(t) {
            for (var e = 0, i = this.options; e < i.length; e++) {
                var n = i[e];
                if (n.getValue() == t)
                    return n
            }
            return s
        }
        ,
        t.prototype.selectOption = function(t) {
            this.isDisabled() || this.getOption(t).select()
        }
        ,
        t.prototype.deselectOption = function(t) {
            this.isDisabled() || this.getOption(t).deselect()
        }
        ,
        t.prototype.isOptionSelected = function(t) {
            return this.getOption(t).isSelected()
        }
        ,
        t.prototype.enableOption = function(t) {
            this.isEnablingAndDisablingPermitted() && this.getOption(t).enable()
        }
        ,
        t.prototype.disableOption = function(t) {
            this.isEnablingAndDisablingPermitted() && this.getOption(t).disable()
        }
        ,
        t.prototype.isOptionDisabled = function(t) {
            return this.getOption(t).isDisabled()
        }
        ,
        t.prototype.disable = function() {
            this.isEnablingAndDisablingPermitted() && this.disableNoPermissionCheck()
        }
        ,
        t.prototype.disableNoPermissionCheck = function() {
            var t = this;
            this.options.forEach((function(e) {
                return t.setBadgeDisabled(e)
            }
            )),
            this.disabled = !0,
            this.div.classList.add("disabled"),
            this.viewBar.classList.remove("dropdown-toggle"),
            this.closeDropdown()
        }
        ,
        t.prototype.setBadgeDisabled = function(t) {
            t.getSelectedItemBadge().classList.add("disabled")
        }
        ,
        t.prototype.enable = function() {
            var t = this;
            this.isEnablingAndDisablingPermitted() && (this.options.forEach((function(e) {
                e.isDisabled() || t.setBadgeEnabled(e)
            }
            )),
            this.disabled = !1,
            this.div.classList.remove("disabled"),
            this.setTabIndex(),
            this.viewBar.classList.add("dropdown-toggle"))
        }
        ,
        t.prototype.setBadgeEnabled = function(t) {
            t.getSelectedItemBadge().classList.remove("disabled")
        }
        ,
        t.prototype.isDisabled = function() {
            return this.disabled
        }
        ,
        t.prototype.selectAll = function() {
            this.isDisabled() || this.selectAllOption.select()
        }
        ,
        t.prototype.deselectAll = function() {
            this.isDisabled() || this.selectAllOption.deselect()
        }
        ,
        t.prototype.getSelectedOptions = function(t) {
            void 0 === t && (t = !0);
            var e = this.options;
            if (!t) {
                if (this.isDisabled())
                    return new Array;
                e = e.filter((function(t) {
                    return !t.isDisabled()
                }
                ))
            }
            return e = e.filter((function(t) {
                return t.isSelected()
            }
            ))
        }
        ,
        t.prototype.getSelectedOptionsAsJson = function(t) {
            void 0 === t && (t = !0);
            var e = {}
              , i = this.getSelectedOptions(t).map((function(t) {
                return t.getValue()
            }
            ));
            return e[this.getName()] = i,
            JSON.stringify(e, null, "  ")
        }
        ,
        t.prototype.getName = function() {
            return this.name
        }
        ,
        t.prototype.dispatchSelectedEvent = function(e) {
            this.dispatchEvent(t.EventType.SELECTED, e.getValue(), e.getLabel())
        }
        ,
        t.prototype.dispatchDeselectedEvent = function(e) {
            this.dispatchEvent(t.EventType.DESELECTED, e.getValue(), e.getLabel())
        }
        ,
        t.prototype.dispatchEvent = function(e, i, n) {
            var o = t.createEvent(e, this.getName(), i, n);
            this.viewBar.dispatchEvent(o)
        }
        ,
        t.prototype.canSelect = function() {
            return this.numSelectedItems < this.maxNumSelectedItems
        }
        ,
        t.prototype.updateSelectionCounter = function() {
            this.selectionCounter.textContent = this.numSelectedItems + "/" + this.maxNumSelectedItems
        }
        ,
        t.SingleOption = function() {
            function t(t, e, i, n, o, s, l) {
                this.fms = t,
                this.div = document.createElement("div"),
                this.checkbox = document.createElement("input"),
                this.checkbox.type = "checkbox";
                var c = i + "-" + e.toString()
                  , r = c + "-chbx";
                this.checkbox.id = r,
                this.checkbox.name = i,
                this.checkbox.value = o,
                this.initiallyChecked = s,
                this.checkbox.checked = !1,
                this.checkbox.disabled = l,
                this.labelFor = document.createElement("label"),
                this.labelFor.htmlFor = r,
                this.labelFor.textContent = n,
                this.div.append(this.checkbox, this.labelFor),
                this.closeButton = document.createElement("button"),
                this.closeButton.type = "button",
                this.closeButton.innerHTML = "&times;",
                this.selectedItemBadge = document.createElement("span"),
                this.selectedItemBadge.setAttribute("data-id", c),
                this.selectedItemBadge.textContent = n,
                this.selectedItemBadge.append(this.closeButton),
                this.disabled = l,
                this.active = !0
            }
            return t.prototype.log = function(t, e) {}
            ,
            t.prototype.initialize = function() {
                var t = this;
                this.div.className = "dropdown-item custom-control",
                this.checkbox.className = "custom-control-input custom-checkbox",
                this.labelFor.className = "custom-control-label",
                this.selectedItemBadge.className = "item",
                this.initiallyChecked && this.selectNoDisabledCheck(),
                this.disabled && this.setDisabledViewState(),
                this.fms.update(),
                this.checkbox.addEventListener("change", (function(e) {
                    (e.stopPropagation(),
                    t.isDisabled() || t.fms.isDisabled()) ? e.preventDefault() : (t.isSelected() ? t.select() : t.deselect(),
                    1 === t.fms.showing.length && t.fms.clearFilterAndRefocus())
                }
                ), !0),
                this.checkbox.addEventListener("keyup", (function(e) {
                    switch (e.key) {
                    case "Enter":
                        e.stopPropagation(),
                        t.checkbox.dispatchEvent(new MouseEvent("click"));
                        break
                    }
                }
                ), !0),
                this.closeButton.addEventListener("click", (function(e) {
                    e.stopPropagation(),
                    t.isDisabled() || t.fms.isDisabled() || (t.deselect(),
                    t.fms.isClosed() || t.fms.refocusFilter())
                }
                ), !0),
                this.checkbox.tabIndex = -1,
                this.closeButton.tabIndex = -1
            }
            ,
            t.prototype.select = function() {
                this.isDisabled() || (this.selectNoDisabledCheck(),
                this.fms.update())
            }
            ,
            t.prototype.selectNoDisabledCheck = function() {
                this.fms.canSelect() && this.isActive() && (this.checkbox.checked = !0,
                this.fms.queueOption(this),
                this.fms.dispatchSelectedEvent(this))
            }
            ,
            t.prototype.deselect = function() {
                this.isDisabled() || (this.checkbox.checked = !1,
                this.fms.unqueueOption(this),
                this.fms.dispatchDeselectedEvent(this),
                this.fms.update())
            }
            ,
            t.prototype.enable = function() {
                this.disabled = !1,
                this.setEnabledViewState(),
                this.fms.update()
            }
            ,
            t.prototype.setEnabledViewState = function() {
                this.checkbox.disabled = !1,
                this.selectedItemBadge.classList.remove("disabled")
            }
            ,
            t.prototype.disable = function() {
                this.disabled = !0,
                this.setDisabledViewState(),
                this.fms.update()
            }
            ,
            t.prototype.setDisabledViewState = function() {
                this.checkbox.disabled = !0,
                this.selectedItemBadge.classList.add("disabled")
            }
            ,
            t.prototype.isSelected = function() {
                return this.checkbox.checked
            }
            ,
            t.prototype.isDisabled = function() {
                return this.checkbox.disabled
            }
            ,
            t.prototype.getListItem = function() {
                return this.div
            }
            ,
            t.prototype.getSelectedItemBadge = function() {
                return this.selectedItemBadge
            }
            ,
            t.prototype.getLabel = function() {
                return this.labelFor.textContent
            }
            ,
            t.prototype.getValue = function() {
                return this.checkbox.value
            }
            ,
            t.prototype.show = function() {
                this.div.hidden = !1
            }
            ,
            t.prototype.hide = function() {
                this.div.hidden = !0
            }
            ,
            t.prototype.isHidden = function() {
                return this.div.hidden
            }
            ,
            t.prototype.focus = function() {
                this.labelFor.focus()
            }
            ,
            t.prototype.isActive = function() {
                return this.active
            }
            ,
            t.prototype.activate = function() {
                this.active = !0,
                this.disabled || this.setEnabledViewState()
            }
            ,
            t.prototype.deactivate = function() {
                this.active = !1,
                this.setDisabledViewState()
            }
            ,
            t
        }(),
        t.UnrestrictedSelectAllOption = function(t) {
            function e(e, i, n) {
                var o = t.call(this, e, -1, i, n, "", !1, !1) || this;
                return o.checkbox.indeterminate = !1,
                o
            }
            return o(e, t),
            e.prototype.markSelectAll = function() {
                this.checkbox.checked = !0,
                this.checkbox.indeterminate = !1
            }
            ,
            e.prototype.markSelectPartial = function() {
                this.checkbox.checked = !1,
                this.checkbox.indeterminate = !0
            }
            ,
            e.prototype.markSelectAllNotDisabled = function() {
                this.checkbox.checked = !0,
                this.checkbox.indeterminate = !0
            }
            ,
            e.prototype.markDeselect = function() {
                this.checkbox.checked = !1,
                this.checkbox.indeterminate = !1
            }
            ,
            e.prototype.select = function() {
                this.isDisabled() || (this.fms.options.filter((function(t) {
                    return !t.isSelected()
                }
                )).forEach((function(t) {
                    return t.select()
                }
                )),
                this.fms.update())
            }
            ,
            e.prototype.deselect = function() {
                this.isDisabled() || (this.fms.options.filter((function(t) {
                    return t.isSelected()
                }
                )).forEach((function(t) {
                    return t.deselect()
                }
                )),
                this.fms.update())
            }
            ,
            e.prototype.enable = function() {
                this.disabled = !1,
                this.checkbox.disabled = !1
            }
            ,
            e.prototype.disable = function() {
                this.disabled = !0,
                this.checkbox.disabled = !0
            }
            ,
            e
        }(t.SingleOption),
        t.RestrictedSelectAllOption = function() {
            function e(e, i, n) {
                this.usao = new t.UnrestrictedSelectAllOption(e,i,n)
            }
            return e.prototype.initialize = function() {
                this.usao.initialize()
            }
            ,
            e.prototype.select = function() {}
            ,
            e.prototype.deselect = function() {
                this.usao.deselect()
            }
            ,
            e.prototype.enable = function() {}
            ,
            e.prototype.disable = function() {}
            ,
            e.prototype.isSelected = function() {
                return !1
            }
            ,
            e.prototype.isDisabled = function() {
                return !0
            }
            ,
            e.prototype.getListItem = function() {
                return document.createElement("div")
            }
            ,
            e.prototype.getSelectedItemBadge = function() {
                return document.createElement("div")
            }
            ,
            e.prototype.getLabel = function() {
                return "RESTRICTED_SELECT_ALL_OPTION"
            }
            ,
            e.prototype.getValue = function() {
                return "RESTRICTED_SELECT_ALL_OPTION"
            }
            ,
            e.prototype.show = function() {}
            ,
            e.prototype.hide = function() {}
            ,
            e.prototype.isHidden = function() {
                return !0
            }
            ,
            e.prototype.focus = function() {}
            ,
            e.prototype.markSelectAll = function() {}
            ,
            e.prototype.markSelectPartial = function() {}
            ,
            e.prototype.markSelectAllNotDisabled = function() {}
            ,
            e.prototype.markDeselect = function() {}
            ,
            e.prototype.activate = function() {}
            ,
            e.prototype.deactivate = function() {}
            ,
            e
        }(),
        t.EventType = {
            SELECTED: "optionselected",
            DESELECTED: "optiondeselected"
        },
        t
    }();
    n.default.fn.filterMultiSelect = function(t) {
        void 0 === (t = n.default.extend({}, n.default.fn.filterMultiSelect.args, t)).placeholderText && (t.placeholderText = "nothing selected"),
        void 0 === t.filterText && (t.filterText = "Filter"),
        void 0 === t.selectAllText && (t.selectAllText = "Select All"),
        void 0 === t.labelText && (t.labelText = ""),
        void 0 === t.selectionLimit && (t.selectionLimit = 0),
        void 0 === t.caseSensitive && (t.caseSensitive = !1),
        void 0 === t.allowEnablingAndDisabling && (t.allowEnablingAndDisabling = !0),
        void 0 === t.items && (t.items = new Array);
        var e = new l(this,t)
          , i = n.default(e.getRootElement());
        this.replaceWith(i);
        var o = {
            hasOption: function(t) {
                return e.hasOption(t)
            },
            selectOption: function(t) {
                e.selectOption(t)
            },
            deselectOption: function(t) {
                e.deselectOption(t)
            },
            isOptionSelected: function(t) {
                return e.isOptionSelected(t)
            },
            enableOption: function(t) {
                e.enableOption(t)
            },
            disableOption: function(t) {
                e.disableOption(t)
            },
            isOptionDisabled: function(t) {
                return e.isOptionDisabled(t)
            },
            enable: function() {
                e.enable()
            },
            disable: function() {
                e.disable()
            },
            selectAll: function() {
                e.selectAll()
            },
            deselectAll: function() {
                e.deselectAll()
            },
            getSelectedOptionsAsJson: function(t) {
                return void 0 === t && (t = !0),
                e.getSelectedOptionsAsJson(t)
            }
        };
        return n.default.fn.filterMultiSelect.applied.push(o),
        o
    }
    ,
    n.default((function() {
        var t = void 0 === n.default.fn.filterMultiSelect.selector ? "select.filter-multi-select" : n.default.fn.filterMultiSelect.selector;
        n.default(t).each((function(t, e) {
            n.default(e).filterMultiSelect()
        }
        ))
    }
    )),
    n.default.fn.filterMultiSelect.applied = new Array,
    n.default.fn.filterMultiSelect.selector = void 0,
    n.default.fn.filterMultiSelect.args = {}
}($);
